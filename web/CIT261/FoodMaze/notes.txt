WELCOME TO THE FOOD MAZE
Usage instructions: Use the arrow keys on your laptop (or swipe on a touch device) to move the circle around the checkered game board. Coffee is bad for you and broccoli and bread are good for you; when you eat coffee your gamepiece will get smaller, turn red, and make a buzzer sound. However, when you eat broccoli or bread, your game piece will get bigger, turn green, and make a blip sound. You can also see an instructional video by pressing the button on the right entitled "View Game Instructions". To exit the video overlay, just click outside of the video area. The following code topics were implemented into this project in the ways described.

Javascript Objects: I have created constructors for 3 different object types: Broccoli, Bread, and Coffee. I created the object representation of the game board by creating 3 of each of these objects and populating them with properties such as whether they are a good food or bad food, location coordinates, and sound file selection, and then adding these objects to one array called foodArray (see lines 27-64 in my script.js file). Later in my code (see the function beginning at line 107), this object array is used to determine whether the player’s circle gamepiece has come into contact with a food (using the object’s location data), and, if yes, what to do based on the object’s properties (good or bad food, audiofile selection, etc).

Manipulating CSS class properties with Javascript: After the circle game piece has moved, Javascript checks to see if it has come into contact with a food during that move. If not, nothing changes. However, if a good food has been eaten, the CSS class “changeGreen” is temporarily added, and then removed a second later. If the food eaten is bad (Coffee), then the CSS class “changeRed” is temporarily added and then removed a second later. Both of these CSS classes are part of a transition and change the color of the player’s circle gamepiece. After the classes are removed, the circle returns to normal. Also, after a food is eaten, the class “hidden” is added to the corresponding  food image so that it is no longer visible for the remainder of the game.

Javascript Events: First of all, I allow the user to control the circle gamepiece with an onkeydown event (line 67 in script.js). If the key they pressed was an arrow key then the circle moves that direction (cannot be moved off the game board). Secondly, I have onclick events within my html for the “View game instructions” button and also for exiting that overlay (you can click anywhere outside the video to exit the overlay). Lastly, I wanted the Food Maze game to work for touch screen, so I have attached a load evet listener (line 147 in script.js) that checks for swiping actions on a touch screen. These motions are processed so that the user can swipe on the gameboard area and the circle will move in the direction they swiped.

HTML5 Tags: First, canvas: Canvas is used to draw the gameboard (yellow and chocolate checkered). I have a canvas element in my HTML and then Javascript manipulates the appearance of the canvas (lines 1-25 in my script.js file). I copied the majority of this canvas manipulation from another place online, and then tailored it with the sizes and colors that I wanted for this application. Second, audio: I have two audio sounds existing on my page. One of them sounds when coffee is eaten by the gamepiece, and the other sounds when another food is eaten by the gamepiece. I added the audio tag in my HTML file and then called play() on that element in my Javascript when the conditions were met. Lastly, video: I created a video describing the instructions for playing the game and added that video to an overlay. When the “view game instructions” button is pressed, the overlay is shown and the video play() function is called in Javascript. When the overlay is closed by clicking outside of the video, the video pause() function is called.

CSS3 Transitions: When the player’s circle game piece eats a good food (broccoli or bread), the circle gradually changes color from its current blue color to a green color over the space of one second (the transition class is “changeGreen” in my css file). After the second is up, the color changes gradually back to blue. When the player’s game piece eats a bad food (coffee), the circle gradually changes color from its original blue color to a red color over the space of one second (the transition class is “changeRed” in my css file). After the second is up, the color changes gradually back to blue.

CSS3 Transforms: I use transforms in two cases in my code (lines 34 and 39 in my css file) when either a good or bad food is eaten. If a good food is eaten, the player’s circle game piece gets larger with a 2d scale operation. If a bad food is eaten, the player’s circle game piece gets smaller with a 2d scale operation. These transforms only affect the appearance of the circle for the duration that the gamepiece has those CSS classes attached to it (changeGreen and changeRed classes), which is for a one second duration. 

CSS3 Animations: The player’s gamepiece and also the words “You are here”, next to the gamepiece, have an animation attached to them. They have a repeating glow pulse around them. The animation for the words animates the text-shadow property and the animation for the circle animates the box-shadow property. This code was largely taken from another place on the internet and then I tailored it for the needs of this application.